/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * OCEAn
 * OpenAPI spec version: 0.9.12
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  BodyRunPlugin,
  HTTPValidationError,
  Plugins200
} from '../../fastapi-schemas';

import { customFetch } from '../../fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary List Plugins
 */
export const getPluginsUrl = () => {


  

  return `http://localhost:8000/plugins/`
}

export const plugins = async ( options?: RequestInit): Promise<Plugins200> => {
  
  return customFetch<Plugins200>(getPluginsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getPluginsQueryKey = () => {
    return [`http://localhost:8000/plugins/`] as const;
    }

    
export const getPluginsQueryOptions = <TData = Awaited<ReturnType<typeof plugins>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof plugins>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPluginsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof plugins>>> = ({ signal }) => plugins({ signal, ...requestOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof plugins>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PluginsQueryResult = NonNullable<Awaited<ReturnType<typeof plugins>>>
export type PluginsQueryError = unknown


export function usePlugins<TData = Awaited<ReturnType<typeof plugins>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof plugins>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof plugins>>,
          TError,
          Awaited<ReturnType<typeof plugins>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePlugins<TData = Awaited<ReturnType<typeof plugins>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof plugins>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof plugins>>,
          TError,
          Awaited<ReturnType<typeof plugins>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePlugins<TData = Awaited<ReturnType<typeof plugins>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof plugins>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List Plugins
 */

export function usePlugins<TData = Awaited<ReturnType<typeof plugins>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof plugins>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPluginsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Run Plugin
 */
export const getRunPluginUrl = (id: string,
    method: string,) => {


  

  return `http://localhost:8000/plugins/run/${id}/${method}`
}

export const runPlugin = async (id: string,
    method: string,
    bodyRunPlugin: BodyRunPlugin, options?: RequestInit): Promise<unknown> => {
  
  return customFetch<unknown>(getRunPluginUrl(id,method),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      bodyRunPlugin,)
  }
);}




export const getRunPluginMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof runPlugin>>, TError,{id: string;method: string;data: BodyRunPlugin}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof runPlugin>>, TError,{id: string;method: string;data: BodyRunPlugin}, TContext> => {

const mutationKey = ['runPlugin'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof runPlugin>>, {id: string;method: string;data: BodyRunPlugin}> = (props) => {
          const {id,method,data} = props ?? {};

          return  runPlugin(id,method,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RunPluginMutationResult = NonNullable<Awaited<ReturnType<typeof runPlugin>>>
    export type RunPluginMutationBody = BodyRunPlugin
    export type RunPluginMutationError = HTTPValidationError

    /**
 * @summary Run Plugin
 */
export const useRunPlugin = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof runPlugin>>, TError,{id: string;method: string;data: BodyRunPlugin}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof runPlugin>>,
        TError,
        {id: string;method: string;data: BodyRunPlugin},
        TContext
      > => {

      const mutationOptions = getRunPluginMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    