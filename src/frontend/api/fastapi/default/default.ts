/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * OCEAn
 * OpenAPI spec version: 0.9.12
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  BodyImportOcel,
  BodyUploadPluginUploadPluginPost,
  DefaultOCEL,
  DownloadOcelDownloadGetParams,
  GetDefaultOcelParams,
  HTTPValidationError,
  ImportDefaultOcelParams,
  ImportOcelParams,
  RunPluginPluginsPluginIdRunPostBody
} from '../../fastapi-schemas';

import { customFetch } from '../../fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Upload Plugin
 */
export const getUploadPluginUploadPluginPostUrl = () => {


  

  return `http://localhost:8000/upload-plugin/`
}

export const uploadPluginUploadPluginPost = async (bodyUploadPluginUploadPluginPost: BodyUploadPluginUploadPluginPost, options?: RequestInit): Promise<unknown> => {
    const formData = new FormData();
formData.append(`zipFile`, bodyUploadPluginUploadPluginPost.zipFile)

  return customFetch<unknown>(getUploadPluginUploadPluginPostUrl(),
  {      
    ...options,
    method: 'POST'
    ,
    body: 
      formData,
  }
);}




export const getUploadPluginUploadPluginPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadPluginUploadPluginPost>>, TError,{data: BodyUploadPluginUploadPluginPost}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof uploadPluginUploadPluginPost>>, TError,{data: BodyUploadPluginUploadPluginPost}, TContext> => {

const mutationKey = ['uploadPluginUploadPluginPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof uploadPluginUploadPluginPost>>, {data: BodyUploadPluginUploadPluginPost}> = (props) => {
          const {data} = props ?? {};

          return  uploadPluginUploadPluginPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UploadPluginUploadPluginPostMutationResult = NonNullable<Awaited<ReturnType<typeof uploadPluginUploadPluginPost>>>
    export type UploadPluginUploadPluginPostMutationBody = BodyUploadPluginUploadPluginPost
    export type UploadPluginUploadPluginPostMutationError = HTTPValidationError

    /**
 * @summary Upload Plugin
 */
export const useUploadPluginUploadPluginPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadPluginUploadPluginPost>>, TError,{data: BodyUploadPluginUploadPluginPost}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof uploadPluginUploadPluginPost>>,
        TError,
        {data: BodyUploadPluginUploadPluginPost},
        TContext
      > => {

      const mutationOptions = getUploadPluginUploadPluginPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary List Plugins
 */
export const getListPluginsPluginsGetUrl = () => {


  

  return `http://localhost:8000/plugins/`
}

export const listPluginsPluginsGet = async ( options?: RequestInit): Promise<unknown> => {
  
  return customFetch<unknown>(getListPluginsPluginsGetUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getListPluginsPluginsGetQueryKey = () => {
    return [`http://localhost:8000/plugins/`] as const;
    }

    
export const getListPluginsPluginsGetQueryOptions = <TData = Awaited<ReturnType<typeof listPluginsPluginsGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listPluginsPluginsGet>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListPluginsPluginsGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listPluginsPluginsGet>>> = ({ signal }) => listPluginsPluginsGet({ signal, ...requestOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listPluginsPluginsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListPluginsPluginsGetQueryResult = NonNullable<Awaited<ReturnType<typeof listPluginsPluginsGet>>>
export type ListPluginsPluginsGetQueryError = unknown


export function useListPluginsPluginsGet<TData = Awaited<ReturnType<typeof listPluginsPluginsGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listPluginsPluginsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listPluginsPluginsGet>>,
          TError,
          Awaited<ReturnType<typeof listPluginsPluginsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListPluginsPluginsGet<TData = Awaited<ReturnType<typeof listPluginsPluginsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listPluginsPluginsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listPluginsPluginsGet>>,
          TError,
          Awaited<ReturnType<typeof listPluginsPluginsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListPluginsPluginsGet<TData = Awaited<ReturnType<typeof listPluginsPluginsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listPluginsPluginsGet>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List Plugins
 */

export function useListPluginsPluginsGet<TData = Awaited<ReturnType<typeof listPluginsPluginsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listPluginsPluginsGet>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListPluginsPluginsGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Plugin
 */
export const getGetPluginPluginsPluginIdGetUrl = (pluginId: string,) => {


  

  return `http://localhost:8000/plugins/${pluginId}`
}

export const getPluginPluginsPluginIdGet = async (pluginId: string, options?: RequestInit): Promise<unknown> => {
  
  return customFetch<unknown>(getGetPluginPluginsPluginIdGetUrl(pluginId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetPluginPluginsPluginIdGetQueryKey = (pluginId: string,) => {
    return [`http://localhost:8000/plugins/${pluginId}`] as const;
    }

    
export const getGetPluginPluginsPluginIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getPluginPluginsPluginIdGet>>, TError = HTTPValidationError>(pluginId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPluginPluginsPluginIdGet>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPluginPluginsPluginIdGetQueryKey(pluginId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPluginPluginsPluginIdGet>>> = ({ signal }) => getPluginPluginsPluginIdGet(pluginId, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(pluginId),  staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPluginPluginsPluginIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPluginPluginsPluginIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getPluginPluginsPluginIdGet>>>
export type GetPluginPluginsPluginIdGetQueryError = HTTPValidationError


export function useGetPluginPluginsPluginIdGet<TData = Awaited<ReturnType<typeof getPluginPluginsPluginIdGet>>, TError = HTTPValidationError>(
 pluginId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPluginPluginsPluginIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPluginPluginsPluginIdGet>>,
          TError,
          Awaited<ReturnType<typeof getPluginPluginsPluginIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPluginPluginsPluginIdGet<TData = Awaited<ReturnType<typeof getPluginPluginsPluginIdGet>>, TError = HTTPValidationError>(
 pluginId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPluginPluginsPluginIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPluginPluginsPluginIdGet>>,
          TError,
          Awaited<ReturnType<typeof getPluginPluginsPluginIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPluginPluginsPluginIdGet<TData = Awaited<ReturnType<typeof getPluginPluginsPluginIdGet>>, TError = HTTPValidationError>(
 pluginId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPluginPluginsPluginIdGet>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Plugin
 */

export function useGetPluginPluginsPluginIdGet<TData = Awaited<ReturnType<typeof getPluginPluginsPluginIdGet>>, TError = HTTPValidationError>(
 pluginId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPluginPluginsPluginIdGet>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPluginPluginsPluginIdGetQueryOptions(pluginId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Run Plugin
 */
export const getRunPluginPluginsPluginIdRunPostUrl = (pluginId: string,) => {


  

  return `http://localhost:8000/plugins/${pluginId}/run`
}

export const runPluginPluginsPluginIdRunPost = async (pluginId: string,
    runPluginPluginsPluginIdRunPostBody: RunPluginPluginsPluginIdRunPostBody, options?: RequestInit): Promise<unknown> => {
  
  return customFetch<unknown>(getRunPluginPluginsPluginIdRunPostUrl(pluginId),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      runPluginPluginsPluginIdRunPostBody,)
  }
);}




export const getRunPluginPluginsPluginIdRunPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof runPluginPluginsPluginIdRunPost>>, TError,{pluginId: string;data: RunPluginPluginsPluginIdRunPostBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof runPluginPluginsPluginIdRunPost>>, TError,{pluginId: string;data: RunPluginPluginsPluginIdRunPostBody}, TContext> => {

const mutationKey = ['runPluginPluginsPluginIdRunPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof runPluginPluginsPluginIdRunPost>>, {pluginId: string;data: RunPluginPluginsPluginIdRunPostBody}> = (props) => {
          const {pluginId,data} = props ?? {};

          return  runPluginPluginsPluginIdRunPost(pluginId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RunPluginPluginsPluginIdRunPostMutationResult = NonNullable<Awaited<ReturnType<typeof runPluginPluginsPluginIdRunPost>>>
    export type RunPluginPluginsPluginIdRunPostMutationBody = RunPluginPluginsPluginIdRunPostBody
    export type RunPluginPluginsPluginIdRunPostMutationError = HTTPValidationError

    /**
 * @summary Run Plugin
 */
export const useRunPluginPluginsPluginIdRunPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof runPluginPluginsPluginIdRunPost>>, TError,{pluginId: string;data: RunPluginPluginsPluginIdRunPostBody}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof runPluginPluginsPluginIdRunPost>>,
        TError,
        {pluginId: string;data: RunPluginPluginsPluginIdRunPostBody},
        TContext
      > => {

      const mutationOptions = getRunPluginPluginsPluginIdRunPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Import OCEL 2.0 from .sqlite file
 */
export const getImportOcelUrl = (params: ImportOcelParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8000/import?${stringifiedParams}` : `http://localhost:8000/import`
}

export const importOcel = async (bodyImportOcel: BodyImportOcel,
    params: ImportOcelParams, options?: RequestInit): Promise<unknown> => {
    const formData = new FormData();
formData.append(`file`, bodyImportOcel.file)

  return customFetch<unknown>(getImportOcelUrl(params),
  {      
    ...options,
    method: 'POST'
    ,
    body: 
      formData,
  }
);}




export const getImportOcelMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof importOcel>>, TError,{data: BodyImportOcel;params: ImportOcelParams}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof importOcel>>, TError,{data: BodyImportOcel;params: ImportOcelParams}, TContext> => {

const mutationKey = ['importOcel'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof importOcel>>, {data: BodyImportOcel;params: ImportOcelParams}> = (props) => {
          const {data,params} = props ?? {};

          return  importOcel(data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ImportOcelMutationResult = NonNullable<Awaited<ReturnType<typeof importOcel>>>
    export type ImportOcelMutationBody = BodyImportOcel
    export type ImportOcelMutationError = HTTPValidationError

    /**
 * @summary Import OCEL 2.0 from .sqlite file
 */
export const useImportOcel = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof importOcel>>, TError,{data: BodyImportOcel;params: ImportOcelParams}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof importOcel>>,
        TError,
        {data: BodyImportOcel;params: ImportOcelParams},
        TContext
      > => {

      const mutationOptions = getImportOcelMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get default OCEL metadata
 */
export const getGetDefaultOcelUrl = (params?: GetDefaultOcelParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8000/ocel/default?${stringifiedParams}` : `http://localhost:8000/ocel/default`
}

export const getDefaultOcel = async (params?: GetDefaultOcelParams, options?: RequestInit): Promise<DefaultOCEL[]> => {
  
  return customFetch<DefaultOCEL[]>(getGetDefaultOcelUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetDefaultOcelQueryKey = (params?: GetDefaultOcelParams,) => {
    return [`http://localhost:8000/ocel/default`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDefaultOcelQueryOptions = <TData = Awaited<ReturnType<typeof getDefaultOcel>>, TError = HTTPValidationError>(params?: GetDefaultOcelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDefaultOcel>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDefaultOcelQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDefaultOcel>>> = ({ signal }) => getDefaultOcel(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDefaultOcel>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDefaultOcelQueryResult = NonNullable<Awaited<ReturnType<typeof getDefaultOcel>>>
export type GetDefaultOcelQueryError = HTTPValidationError


export function useGetDefaultOcel<TData = Awaited<ReturnType<typeof getDefaultOcel>>, TError = HTTPValidationError>(
 params: undefined |  GetDefaultOcelParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDefaultOcel>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDefaultOcel>>,
          TError,
          Awaited<ReturnType<typeof getDefaultOcel>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDefaultOcel<TData = Awaited<ReturnType<typeof getDefaultOcel>>, TError = HTTPValidationError>(
 params?: GetDefaultOcelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDefaultOcel>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDefaultOcel>>,
          TError,
          Awaited<ReturnType<typeof getDefaultOcel>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDefaultOcel<TData = Awaited<ReturnType<typeof getDefaultOcel>>, TError = HTTPValidationError>(
 params?: GetDefaultOcelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDefaultOcel>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get default OCEL metadata
 */

export function useGetDefaultOcel<TData = Awaited<ReturnType<typeof getDefaultOcel>>, TError = HTTPValidationError>(
 params?: GetDefaultOcelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDefaultOcel>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetDefaultOcelQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Import default OCEL
 */
export const getImportDefaultOcelUrl = (params: ImportDefaultOcelParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8000/import-default?${stringifiedParams}` : `http://localhost:8000/import-default`
}

export const importDefaultOcel = async (params: ImportDefaultOcelParams, options?: RequestInit): Promise<unknown> => {
  
  return customFetch<unknown>(getImportDefaultOcelUrl(params),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}




export const getImportDefaultOcelMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof importDefaultOcel>>, TError,{params: ImportDefaultOcelParams}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof importDefaultOcel>>, TError,{params: ImportDefaultOcelParams}, TContext> => {

const mutationKey = ['importDefaultOcel'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof importDefaultOcel>>, {params: ImportDefaultOcelParams}> = (props) => {
          const {params} = props ?? {};

          return  importDefaultOcel(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ImportDefaultOcelMutationResult = NonNullable<Awaited<ReturnType<typeof importDefaultOcel>>>
    
    export type ImportDefaultOcelMutationError = HTTPValidationError

    /**
 * @summary Import default OCEL
 */
export const useImportDefaultOcel = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof importDefaultOcel>>, TError,{params: ImportDefaultOcelParams}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof importDefaultOcel>>,
        TError,
        {params: ImportDefaultOcelParams},
        TContext
      > => {

      const mutationOptions = getImportDefaultOcelMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Download OCEL including app state
 */
export const getDownloadOcelDownloadGetUrl = (params: DownloadOcelDownloadGetParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8000/download?${stringifiedParams}` : `http://localhost:8000/download`
}

export const downloadOcelDownloadGet = async (params: DownloadOcelDownloadGetParams, options?: RequestInit): Promise<unknown> => {
  
  return customFetch<unknown>(getDownloadOcelDownloadGetUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getDownloadOcelDownloadGetQueryKey = (params: DownloadOcelDownloadGetParams,) => {
    return [`http://localhost:8000/download`, ...(params ? [params]: [])] as const;
    }

    
export const getDownloadOcelDownloadGetQueryOptions = <TData = Awaited<ReturnType<typeof downloadOcelDownloadGet>>, TError = HTTPValidationError>(params: DownloadOcelDownloadGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadOcelDownloadGet>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDownloadOcelDownloadGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof downloadOcelDownloadGet>>> = ({ signal }) => downloadOcelDownloadGet(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof downloadOcelDownloadGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DownloadOcelDownloadGetQueryResult = NonNullable<Awaited<ReturnType<typeof downloadOcelDownloadGet>>>
export type DownloadOcelDownloadGetQueryError = HTTPValidationError


export function useDownloadOcelDownloadGet<TData = Awaited<ReturnType<typeof downloadOcelDownloadGet>>, TError = HTTPValidationError>(
 params: DownloadOcelDownloadGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadOcelDownloadGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof downloadOcelDownloadGet>>,
          TError,
          Awaited<ReturnType<typeof downloadOcelDownloadGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDownloadOcelDownloadGet<TData = Awaited<ReturnType<typeof downloadOcelDownloadGet>>, TError = HTTPValidationError>(
 params: DownloadOcelDownloadGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadOcelDownloadGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof downloadOcelDownloadGet>>,
          TError,
          Awaited<ReturnType<typeof downloadOcelDownloadGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDownloadOcelDownloadGet<TData = Awaited<ReturnType<typeof downloadOcelDownloadGet>>, TError = HTTPValidationError>(
 params: DownloadOcelDownloadGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadOcelDownloadGet>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Download OCEL including app state
 */

export function useDownloadOcelDownloadGet<TData = Awaited<ReturnType<typeof downloadOcelDownloadGet>>, TError = HTTPValidationError>(
 params: DownloadOcelDownloadGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadOcelDownloadGet>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDownloadOcelDownloadGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



