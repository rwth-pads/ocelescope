/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * OCEAn
 * OpenAPI spec version: 0.9.12
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  BodyUploadPluginPluginPost,
  HTTPValidationError,
  PluginSummary,
  RunPluginPluginPluginIdRunPostBody
} from '../../fastapi-schemas';

import { customFetch } from '../../fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary List Plugins
 */
export const getListPluginsPluginGetUrl = () => {


  

  return `http://localhost:8000/plugin/`
}

export const listPluginsPluginGet = async ( options?: RequestInit): Promise<PluginSummary[]> => {
  
  return customFetch<PluginSummary[]>(getListPluginsPluginGetUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getListPluginsPluginGetQueryKey = () => {
    return [`http://localhost:8000/plugin/`] as const;
    }

    
export const getListPluginsPluginGetQueryOptions = <TData = Awaited<ReturnType<typeof listPluginsPluginGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listPluginsPluginGet>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListPluginsPluginGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listPluginsPluginGet>>> = ({ signal }) => listPluginsPluginGet({ signal, ...requestOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listPluginsPluginGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListPluginsPluginGetQueryResult = NonNullable<Awaited<ReturnType<typeof listPluginsPluginGet>>>
export type ListPluginsPluginGetQueryError = unknown


export function useListPluginsPluginGet<TData = Awaited<ReturnType<typeof listPluginsPluginGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listPluginsPluginGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listPluginsPluginGet>>,
          TError,
          Awaited<ReturnType<typeof listPluginsPluginGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListPluginsPluginGet<TData = Awaited<ReturnType<typeof listPluginsPluginGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listPluginsPluginGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listPluginsPluginGet>>,
          TError,
          Awaited<ReturnType<typeof listPluginsPluginGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListPluginsPluginGet<TData = Awaited<ReturnType<typeof listPluginsPluginGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listPluginsPluginGet>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List Plugins
 */

export function useListPluginsPluginGet<TData = Awaited<ReturnType<typeof listPluginsPluginGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listPluginsPluginGet>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListPluginsPluginGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Upload Plugin
 */
export const getUploadPluginPluginPostUrl = () => {


  

  return `http://localhost:8000/plugin/`
}

export const uploadPluginPluginPost = async (bodyUploadPluginPluginPost: BodyUploadPluginPluginPost, options?: RequestInit): Promise<unknown> => {
    const formData = new FormData();
formData.append(`zip_file`, bodyUploadPluginPluginPost.zip_file)

  return customFetch<unknown>(getUploadPluginPluginPostUrl(),
  {      
    ...options,
    method: 'POST'
    ,
    body: 
      formData,
  }
);}




export const getUploadPluginPluginPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadPluginPluginPost>>, TError,{data: BodyUploadPluginPluginPost}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof uploadPluginPluginPost>>, TError,{data: BodyUploadPluginPluginPost}, TContext> => {

const mutationKey = ['uploadPluginPluginPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof uploadPluginPluginPost>>, {data: BodyUploadPluginPluginPost}> = (props) => {
          const {data} = props ?? {};

          return  uploadPluginPluginPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UploadPluginPluginPostMutationResult = NonNullable<Awaited<ReturnType<typeof uploadPluginPluginPost>>>
    export type UploadPluginPluginPostMutationBody = BodyUploadPluginPluginPost
    export type UploadPluginPluginPostMutationError = HTTPValidationError

    /**
 * @summary Upload Plugin
 */
export const useUploadPluginPluginPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadPluginPluginPost>>, TError,{data: BodyUploadPluginPluginPost}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof uploadPluginPluginPost>>,
        TError,
        {data: BodyUploadPluginPluginPost},
        TContext
      > => {

      const mutationOptions = getUploadPluginPluginPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Run Plugin
 */
export const getRunPluginPluginPluginIdRunPostUrl = (pluginId: string,) => {


  

  return `http://localhost:8000/plugin/${pluginId}/run`
}

export const runPluginPluginPluginIdRunPost = async (pluginId: string,
    runPluginPluginPluginIdRunPostBody: RunPluginPluginPluginIdRunPostBody, options?: RequestInit): Promise<unknown> => {
  
  return customFetch<unknown>(getRunPluginPluginPluginIdRunPostUrl(pluginId),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      runPluginPluginPluginIdRunPostBody,)
  }
);}




export const getRunPluginPluginPluginIdRunPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof runPluginPluginPluginIdRunPost>>, TError,{pluginId: string;data: RunPluginPluginPluginIdRunPostBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof runPluginPluginPluginIdRunPost>>, TError,{pluginId: string;data: RunPluginPluginPluginIdRunPostBody}, TContext> => {

const mutationKey = ['runPluginPluginPluginIdRunPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof runPluginPluginPluginIdRunPost>>, {pluginId: string;data: RunPluginPluginPluginIdRunPostBody}> = (props) => {
          const {pluginId,data} = props ?? {};

          return  runPluginPluginPluginIdRunPost(pluginId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RunPluginPluginPluginIdRunPostMutationResult = NonNullable<Awaited<ReturnType<typeof runPluginPluginPluginIdRunPost>>>
    export type RunPluginPluginPluginIdRunPostMutationBody = RunPluginPluginPluginIdRunPostBody
    export type RunPluginPluginPluginIdRunPostMutationError = HTTPValidationError

    /**
 * @summary Run Plugin
 */
export const useRunPluginPluginPluginIdRunPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof runPluginPluginPluginIdRunPost>>, TError,{pluginId: string;data: RunPluginPluginPluginIdRunPostBody}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof runPluginPluginPluginIdRunPost>>,
        TError,
        {pluginId: string;data: RunPluginPluginPluginIdRunPostBody},
        TContext
      > => {

      const mutationOptions = getRunPluginPluginPluginIdRunPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    