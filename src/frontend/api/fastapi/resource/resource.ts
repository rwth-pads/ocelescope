/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * OCEAn
 * OpenAPI spec version: 0.9.12
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  HTTPValidationError,
  Resource
} from '../../fastapi-schemas';

import { customFetch } from '../../fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Returns all available resources
 */
export const getGetResourcesUrl = () => {


  

  return `http://localhost:8000/resource/`
}

export const getResources = async ( options?: RequestInit): Promise<Resource[]> => {
  
  return customFetch<Resource[]>(getGetResourcesUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetResourcesQueryKey = () => {
    return [`http://localhost:8000/resource/`] as const;
    }

    
export const getGetResourcesQueryOptions = <TData = Awaited<ReturnType<typeof getResources>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResources>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetResourcesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getResources>>> = ({ signal }) => getResources({ signal, ...requestOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getResources>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetResourcesQueryResult = NonNullable<Awaited<ReturnType<typeof getResources>>>
export type GetResourcesQueryError = unknown


export function useGetResources<TData = Awaited<ReturnType<typeof getResources>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResources>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getResources>>,
          TError,
          Awaited<ReturnType<typeof getResources>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetResources<TData = Awaited<ReturnType<typeof getResources>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResources>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getResources>>,
          TError,
          Awaited<ReturnType<typeof getResources>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetResources<TData = Awaited<ReturnType<typeof getResources>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResources>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Returns all available resources
 */

export function useGetResources<TData = Awaited<ReturnType<typeof getResources>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResources>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetResourcesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Getresource
 */
export const getGetResourceResourceResourceIdGetUrl = (resourceId: string,) => {


  

  return `http://localhost:8000/resource/${resourceId}`
}

export const getResourceResourceResourceIdGet = async (resourceId: string, options?: RequestInit): Promise<Resource> => {
  
  return customFetch<Resource>(getGetResourceResourceResourceIdGetUrl(resourceId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetResourceResourceResourceIdGetQueryKey = (resourceId: string,) => {
    return [`http://localhost:8000/resource/${resourceId}`] as const;
    }

    
export const getGetResourceResourceResourceIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getResourceResourceResourceIdGet>>, TError = HTTPValidationError>(resourceId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResourceResourceResourceIdGet>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetResourceResourceResourceIdGetQueryKey(resourceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getResourceResourceResourceIdGet>>> = ({ signal }) => getResourceResourceResourceIdGet(resourceId, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(resourceId),  staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getResourceResourceResourceIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetResourceResourceResourceIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getResourceResourceResourceIdGet>>>
export type GetResourceResourceResourceIdGetQueryError = HTTPValidationError


export function useGetResourceResourceResourceIdGet<TData = Awaited<ReturnType<typeof getResourceResourceResourceIdGet>>, TError = HTTPValidationError>(
 resourceId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResourceResourceResourceIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getResourceResourceResourceIdGet>>,
          TError,
          Awaited<ReturnType<typeof getResourceResourceResourceIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetResourceResourceResourceIdGet<TData = Awaited<ReturnType<typeof getResourceResourceResourceIdGet>>, TError = HTTPValidationError>(
 resourceId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResourceResourceResourceIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getResourceResourceResourceIdGet>>,
          TError,
          Awaited<ReturnType<typeof getResourceResourceResourceIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetResourceResourceResourceIdGet<TData = Awaited<ReturnType<typeof getResourceResourceResourceIdGet>>, TError = HTTPValidationError>(
 resourceId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResourceResourceResourceIdGet>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Getresource
 */

export function useGetResourceResourceResourceIdGet<TData = Awaited<ReturnType<typeof getResourceResourceResourceIdGet>>, TError = HTTPValidationError>(
 resourceId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResourceResourceResourceIdGet>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetResourceResourceResourceIdGetQueryOptions(resourceId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Deleteresource
 */
export const getDeleteResourceUrl = (resourceId: string,) => {


  

  return `http://localhost:8000/resource/${resourceId}`
}

export const deleteResource = async (resourceId: string, options?: RequestInit): Promise<unknown> => {
  
  return customFetch<unknown>(getDeleteResourceUrl(resourceId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}




export const getDeleteResourceMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteResource>>, TError,{resourceId: string}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteResource>>, TError,{resourceId: string}, TContext> => {

const mutationKey = ['deleteResource'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteResource>>, {resourceId: string}> = (props) => {
          const {resourceId} = props ?? {};

          return  deleteResource(resourceId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteResourceMutationResult = NonNullable<Awaited<ReturnType<typeof deleteResource>>>
    
    export type DeleteResourceMutationError = HTTPValidationError

    /**
 * @summary Deleteresource
 */
export const useDeleteResource = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteResource>>, TError,{resourceId: string}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteResource>>,
        TError,
        {resourceId: string},
        TContext
      > => {

      const mutationOptions = getDeleteResourceMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    