/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * OCEAn
 * OpenAPI spec version: 0.9.12
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  HTTPValidationError,
  Resource,
  SaveTotemParams,
  TaskResponseTotem,
  TotemParams
} from '../../fastapi-schemas';

import { customFetch } from '../../fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Get Totem
 */
export const getTotemUrl = (params?: TotemParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8000/totem/totem?${stringifiedParams}` : `http://localhost:8000/totem/totem`
}

export const totem = async (params?: TotemParams, options?: RequestInit): Promise<TaskResponseTotem> => {
  
  return customFetch<TaskResponseTotem>(getTotemUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getTotemQueryKey = (params?: TotemParams,) => {
    return [`http://localhost:8000/totem/totem`, ...(params ? [params]: [])] as const;
    }

    
export const getTotemQueryOptions = <TData = Awaited<ReturnType<typeof totem>>, TError = HTTPValidationError>(params?: TotemParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof totem>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTotemQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof totem>>> = ({ signal }) => totem(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof totem>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TotemQueryResult = NonNullable<Awaited<ReturnType<typeof totem>>>
export type TotemQueryError = HTTPValidationError


export function useTotem<TData = Awaited<ReturnType<typeof totem>>, TError = HTTPValidationError>(
 params: undefined |  TotemParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof totem>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof totem>>,
          TError,
          Awaited<ReturnType<typeof totem>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTotem<TData = Awaited<ReturnType<typeof totem>>, TError = HTTPValidationError>(
 params?: TotemParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof totem>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof totem>>,
          TError,
          Awaited<ReturnType<typeof totem>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTotem<TData = Awaited<ReturnType<typeof totem>>, TError = HTTPValidationError>(
 params?: TotemParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof totem>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Totem
 */

export function useTotem<TData = Awaited<ReturnType<typeof totem>>, TError = HTTPValidationError>(
 params?: TotemParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof totem>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTotemQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Save Pnet
 */
export const getSaveTotemUrl = (params?: SaveTotemParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8000/totem/totem?${stringifiedParams}` : `http://localhost:8000/totem/totem`
}

export const saveTotem = async (params?: SaveTotemParams, options?: RequestInit): Promise<Resource> => {
  
  return customFetch<Resource>(getSaveTotemUrl(params),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}




export const getSaveTotemMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveTotem>>, TError,{params?: SaveTotemParams}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof saveTotem>>, TError,{params?: SaveTotemParams}, TContext> => {

const mutationKey = ['saveTotem'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof saveTotem>>, {params?: SaveTotemParams}> = (props) => {
          const {params} = props ?? {};

          return  saveTotem(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SaveTotemMutationResult = NonNullable<Awaited<ReturnType<typeof saveTotem>>>
    
    export type SaveTotemMutationError = HTTPValidationError

    /**
 * @summary Save Pnet
 */
export const useSaveTotem = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveTotem>>, TError,{params?: SaveTotemParams}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof saveTotem>>,
        TError,
        {params?: SaveTotemParams},
        TContext
      > => {

      const mutationOptions = getSaveTotemMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    