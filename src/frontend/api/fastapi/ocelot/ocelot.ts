/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * OCEAn
 * OpenAPI spec version: 0.9.12
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  HTTPValidationError,
  OcelotEventInfoParams,
  OcelotObjectInfoParams,
  OcelotPaginatedEventsParams,
  OcelotPaginatedObjectsParams,
  PaginatedResponse,
} from "../../fastapi-schemas";

import { customFetch } from "../../fetcher";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get Events
 */
export const getOcelotPaginatedEventsUrl = (
  params: OcelotPaginatedEventsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `http://localhost:8000/ocelot/events?${stringifiedParams}`
    : `http://localhost:8000/ocelot/events`;
};

export const ocelotPaginatedEvents = async (
  params: OcelotPaginatedEventsParams,
  options?: RequestInit,
): Promise<PaginatedResponse> => {
  return customFetch<PaginatedResponse>(getOcelotPaginatedEventsUrl(params), {
    ...options,
    method: "GET",
  });
};

export const getOcelotPaginatedEventsQueryKey = (
  params: OcelotPaginatedEventsParams,
) => {
  return [
    `http://localhost:8000/ocelot/events`,
    ...(params ? [params] : []),
  ] as const;
};

export const getOcelotPaginatedEventsQueryOptions = <
  TData = Awaited<ReturnType<typeof ocelotPaginatedEvents>>,
  TError = HTTPValidationError,
>(
  params: OcelotPaginatedEventsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ocelotPaginatedEvents>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getOcelotPaginatedEventsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ocelotPaginatedEvents>>
  > = ({ signal }) =>
    ocelotPaginatedEvents(params, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    staleTime: 300000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof ocelotPaginatedEvents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OcelotPaginatedEventsQueryResult = NonNullable<
  Awaited<ReturnType<typeof ocelotPaginatedEvents>>
>;
export type OcelotPaginatedEventsQueryError = HTTPValidationError;

export function useOcelotPaginatedEvents<
  TData = Awaited<ReturnType<typeof ocelotPaginatedEvents>>,
  TError = HTTPValidationError,
>(
  params: OcelotPaginatedEventsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ocelotPaginatedEvents>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ocelotPaginatedEvents>>,
          TError,
          Awaited<ReturnType<typeof ocelotPaginatedEvents>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOcelotPaginatedEvents<
  TData = Awaited<ReturnType<typeof ocelotPaginatedEvents>>,
  TError = HTTPValidationError,
>(
  params: OcelotPaginatedEventsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ocelotPaginatedEvents>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ocelotPaginatedEvents>>,
          TError,
          Awaited<ReturnType<typeof ocelotPaginatedEvents>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOcelotPaginatedEvents<
  TData = Awaited<ReturnType<typeof ocelotPaginatedEvents>>,
  TError = HTTPValidationError,
>(
  params: OcelotPaginatedEventsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ocelotPaginatedEvents>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Events
 */

export function useOcelotPaginatedEvents<
  TData = Awaited<ReturnType<typeof ocelotPaginatedEvents>>,
  TError = HTTPValidationError,
>(
  params: OcelotPaginatedEventsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ocelotPaginatedEvents>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOcelotPaginatedEventsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get Objects
 */
export const getOcelotPaginatedObjectsUrl = (
  params: OcelotPaginatedObjectsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `http://localhost:8000/ocelot/objects?${stringifiedParams}`
    : `http://localhost:8000/ocelot/objects`;
};

export const ocelotPaginatedObjects = async (
  params: OcelotPaginatedObjectsParams,
  options?: RequestInit,
): Promise<PaginatedResponse> => {
  return customFetch<PaginatedResponse>(getOcelotPaginatedObjectsUrl(params), {
    ...options,
    method: "GET",
  });
};

export const getOcelotPaginatedObjectsQueryKey = (
  params: OcelotPaginatedObjectsParams,
) => {
  return [
    `http://localhost:8000/ocelot/objects`,
    ...(params ? [params] : []),
  ] as const;
};

export const getOcelotPaginatedObjectsQueryOptions = <
  TData = Awaited<ReturnType<typeof ocelotPaginatedObjects>>,
  TError = HTTPValidationError,
>(
  params: OcelotPaginatedObjectsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ocelotPaginatedObjects>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getOcelotPaginatedObjectsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ocelotPaginatedObjects>>
  > = ({ signal }) =>
    ocelotPaginatedObjects(params, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    staleTime: 300000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof ocelotPaginatedObjects>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OcelotPaginatedObjectsQueryResult = NonNullable<
  Awaited<ReturnType<typeof ocelotPaginatedObjects>>
>;
export type OcelotPaginatedObjectsQueryError = HTTPValidationError;

export function useOcelotPaginatedObjects<
  TData = Awaited<ReturnType<typeof ocelotPaginatedObjects>>,
  TError = HTTPValidationError,
>(
  params: OcelotPaginatedObjectsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ocelotPaginatedObjects>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ocelotPaginatedObjects>>,
          TError,
          Awaited<ReturnType<typeof ocelotPaginatedObjects>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOcelotPaginatedObjects<
  TData = Awaited<ReturnType<typeof ocelotPaginatedObjects>>,
  TError = HTTPValidationError,
>(
  params: OcelotPaginatedObjectsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ocelotPaginatedObjects>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ocelotPaginatedObjects>>,
          TError,
          Awaited<ReturnType<typeof ocelotPaginatedObjects>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOcelotPaginatedObjects<
  TData = Awaited<ReturnType<typeof ocelotPaginatedObjects>>,
  TError = HTTPValidationError,
>(
  params: OcelotPaginatedObjectsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ocelotPaginatedObjects>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Objects
 */

export function useOcelotPaginatedObjects<
  TData = Awaited<ReturnType<typeof ocelotPaginatedObjects>>,
  TError = HTTPValidationError,
>(
  params: OcelotPaginatedObjectsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ocelotPaginatedObjects>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOcelotPaginatedObjectsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get Objects Info
 */
export const getOcelotObjectInfoUrl = (params?: OcelotObjectInfoParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `http://localhost:8000/ocelot/objectInfo?${stringifiedParams}`
    : `http://localhost:8000/ocelot/objectInfo`;
};

export const ocelotObjectInfo = async (
  params?: OcelotObjectInfoParams,
  options?: RequestInit,
): Promise<string[]> => {
  return customFetch<string[]>(getOcelotObjectInfoUrl(params), {
    ...options,
    method: "GET",
  });
};

export const getOcelotObjectInfoQueryKey = (
  params?: OcelotObjectInfoParams,
) => {
  return [
    `http://localhost:8000/ocelot/objectInfo`,
    ...(params ? [params] : []),
  ] as const;
};

export const getOcelotObjectInfoQueryOptions = <
  TData = Awaited<ReturnType<typeof ocelotObjectInfo>>,
  TError = HTTPValidationError,
>(
  params?: OcelotObjectInfoParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ocelotObjectInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getOcelotObjectInfoQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ocelotObjectInfo>>
  > = ({ signal }) => ocelotObjectInfo(params, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    staleTime: 300000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof ocelotObjectInfo>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OcelotObjectInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof ocelotObjectInfo>>
>;
export type OcelotObjectInfoQueryError = HTTPValidationError;

export function useOcelotObjectInfo<
  TData = Awaited<ReturnType<typeof ocelotObjectInfo>>,
  TError = HTTPValidationError,
>(
  params: undefined | OcelotObjectInfoParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ocelotObjectInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ocelotObjectInfo>>,
          TError,
          Awaited<ReturnType<typeof ocelotObjectInfo>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOcelotObjectInfo<
  TData = Awaited<ReturnType<typeof ocelotObjectInfo>>,
  TError = HTTPValidationError,
>(
  params?: OcelotObjectInfoParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ocelotObjectInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ocelotObjectInfo>>,
          TError,
          Awaited<ReturnType<typeof ocelotObjectInfo>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOcelotObjectInfo<
  TData = Awaited<ReturnType<typeof ocelotObjectInfo>>,
  TError = HTTPValidationError,
>(
  params?: OcelotObjectInfoParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ocelotObjectInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Objects Info
 */

export function useOcelotObjectInfo<
  TData = Awaited<ReturnType<typeof ocelotObjectInfo>>,
  TError = HTTPValidationError,
>(
  params?: OcelotObjectInfoParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ocelotObjectInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOcelotObjectInfoQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get Event Info
 */
export const getOcelotEventInfoUrl = (params?: OcelotEventInfoParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `http://localhost:8000/ocelot/eventInfo?${stringifiedParams}`
    : `http://localhost:8000/ocelot/eventInfo`;
};

export const ocelotEventInfo = async (
  params?: OcelotEventInfoParams,
  options?: RequestInit,
): Promise<string[]> => {
  return customFetch<string[]>(getOcelotEventInfoUrl(params), {
    ...options,
    method: "GET",
  });
};

export const getOcelotEventInfoQueryKey = (params?: OcelotEventInfoParams) => {
  return [
    `http://localhost:8000/ocelot/eventInfo`,
    ...(params ? [params] : []),
  ] as const;
};

export const getOcelotEventInfoQueryOptions = <
  TData = Awaited<ReturnType<typeof ocelotEventInfo>>,
  TError = HTTPValidationError,
>(
  params?: OcelotEventInfoParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ocelotEventInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOcelotEventInfoQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof ocelotEventInfo>>> = ({
    signal,
  }) => ocelotEventInfo(params, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    staleTime: 300000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof ocelotEventInfo>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type OcelotEventInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof ocelotEventInfo>>
>;
export type OcelotEventInfoQueryError = HTTPValidationError;

export function useOcelotEventInfo<
  TData = Awaited<ReturnType<typeof ocelotEventInfo>>,
  TError = HTTPValidationError,
>(
  params: undefined | OcelotEventInfoParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ocelotEventInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ocelotEventInfo>>,
          TError,
          Awaited<ReturnType<typeof ocelotEventInfo>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOcelotEventInfo<
  TData = Awaited<ReturnType<typeof ocelotEventInfo>>,
  TError = HTTPValidationError,
>(
  params?: OcelotEventInfoParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ocelotEventInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ocelotEventInfo>>,
          TError,
          Awaited<ReturnType<typeof ocelotEventInfo>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useOcelotEventInfo<
  TData = Awaited<ReturnType<typeof ocelotEventInfo>>,
  TError = HTTPValidationError,
>(
  params?: OcelotEventInfoParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ocelotEventInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Event Info
 */

export function useOcelotEventInfo<
  TData = Awaited<ReturnType<typeof ocelotEventInfo>>,
  TError = HTTPValidationError,
>(
  params?: OcelotEventInfoParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof ocelotEventInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getOcelotEventInfoQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
