/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * OCEAn
 * OpenAPI spec version: 0.9.12
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  BertiOcdfgParams,
  BertiPetriNetParams,
  BertiSaveOcdfgParams,
  BertiSavePnetParams,
  HTTPValidationError,
  ResourceOutput,
  TaskResponseObjectCentricDirectlyFollowsGraph,
  TaskResponseObjectCentricPetriNet
} from '../../fastapi-schemas';

import { customFetch } from '../../fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Get Petri Net
 */
export const getBertiPetriNetUrl = (params?: BertiPetriNetParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8000/berti/petriNet?${stringifiedParams}` : `http://localhost:8000/berti/petriNet`
}

export const bertiPetriNet = async (params?: BertiPetriNetParams, options?: RequestInit): Promise<TaskResponseObjectCentricPetriNet> => {
  
  return customFetch<TaskResponseObjectCentricPetriNet>(getBertiPetriNetUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getBertiPetriNetQueryKey = (params?: BertiPetriNetParams,) => {
    return [`http://localhost:8000/berti/petriNet`, ...(params ? [params]: [])] as const;
    }

    
export const getBertiPetriNetQueryOptions = <TData = Awaited<ReturnType<typeof bertiPetriNet>>, TError = HTTPValidationError>(params?: BertiPetriNetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof bertiPetriNet>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBertiPetriNetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof bertiPetriNet>>> = ({ signal }) => bertiPetriNet(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof bertiPetriNet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type BertiPetriNetQueryResult = NonNullable<Awaited<ReturnType<typeof bertiPetriNet>>>
export type BertiPetriNetQueryError = HTTPValidationError


export function useBertiPetriNet<TData = Awaited<ReturnType<typeof bertiPetriNet>>, TError = HTTPValidationError>(
 params: undefined |  BertiPetriNetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof bertiPetriNet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof bertiPetriNet>>,
          TError,
          Awaited<ReturnType<typeof bertiPetriNet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBertiPetriNet<TData = Awaited<ReturnType<typeof bertiPetriNet>>, TError = HTTPValidationError>(
 params?: BertiPetriNetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof bertiPetriNet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof bertiPetriNet>>,
          TError,
          Awaited<ReturnType<typeof bertiPetriNet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBertiPetriNet<TData = Awaited<ReturnType<typeof bertiPetriNet>>, TError = HTTPValidationError>(
 params?: BertiPetriNetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof bertiPetriNet>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Petri Net
 */

export function useBertiPetriNet<TData = Awaited<ReturnType<typeof bertiPetriNet>>, TError = HTTPValidationError>(
 params?: BertiPetriNetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof bertiPetriNet>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getBertiPetriNetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Ocdfg
 */
export const getBertiOcdfgUrl = (params?: BertiOcdfgParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8000/berti/ocdfg?${stringifiedParams}` : `http://localhost:8000/berti/ocdfg`
}

export const bertiOcdfg = async (params?: BertiOcdfgParams, options?: RequestInit): Promise<TaskResponseObjectCentricDirectlyFollowsGraph> => {
  
  return customFetch<TaskResponseObjectCentricDirectlyFollowsGraph>(getBertiOcdfgUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getBertiOcdfgQueryKey = (params?: BertiOcdfgParams,) => {
    return [`http://localhost:8000/berti/ocdfg`, ...(params ? [params]: [])] as const;
    }

    
export const getBertiOcdfgQueryOptions = <TData = Awaited<ReturnType<typeof bertiOcdfg>>, TError = HTTPValidationError>(params?: BertiOcdfgParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof bertiOcdfg>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBertiOcdfgQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof bertiOcdfg>>> = ({ signal }) => bertiOcdfg(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof bertiOcdfg>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type BertiOcdfgQueryResult = NonNullable<Awaited<ReturnType<typeof bertiOcdfg>>>
export type BertiOcdfgQueryError = HTTPValidationError


export function useBertiOcdfg<TData = Awaited<ReturnType<typeof bertiOcdfg>>, TError = HTTPValidationError>(
 params: undefined |  BertiOcdfgParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof bertiOcdfg>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof bertiOcdfg>>,
          TError,
          Awaited<ReturnType<typeof bertiOcdfg>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBertiOcdfg<TData = Awaited<ReturnType<typeof bertiOcdfg>>, TError = HTTPValidationError>(
 params?: BertiOcdfgParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof bertiOcdfg>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof bertiOcdfg>>,
          TError,
          Awaited<ReturnType<typeof bertiOcdfg>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBertiOcdfg<TData = Awaited<ReturnType<typeof bertiOcdfg>>, TError = HTTPValidationError>(
 params?: BertiOcdfgParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof bertiOcdfg>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Ocdfg
 */

export function useBertiOcdfg<TData = Awaited<ReturnType<typeof bertiOcdfg>>, TError = HTTPValidationError>(
 params?: BertiOcdfgParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof bertiOcdfg>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getBertiOcdfgQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Save Ocdfg
 */
export const getBertiSaveOcdfgUrl = (params?: BertiSaveOcdfgParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8000/berti/ocdfg?${stringifiedParams}` : `http://localhost:8000/berti/ocdfg`
}

export const bertiSaveOcdfg = async (params?: BertiSaveOcdfgParams, options?: RequestInit): Promise<ResourceOutput> => {
  
  return customFetch<ResourceOutput>(getBertiSaveOcdfgUrl(params),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}




export const getBertiSaveOcdfgMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bertiSaveOcdfg>>, TError,{params?: BertiSaveOcdfgParams}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof bertiSaveOcdfg>>, TError,{params?: BertiSaveOcdfgParams}, TContext> => {

const mutationKey = ['bertiSaveOcdfg'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof bertiSaveOcdfg>>, {params?: BertiSaveOcdfgParams}> = (props) => {
          const {params} = props ?? {};

          return  bertiSaveOcdfg(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type BertiSaveOcdfgMutationResult = NonNullable<Awaited<ReturnType<typeof bertiSaveOcdfg>>>
    
    export type BertiSaveOcdfgMutationError = HTTPValidationError

    /**
 * @summary Save Ocdfg
 */
export const useBertiSaveOcdfg = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bertiSaveOcdfg>>, TError,{params?: BertiSaveOcdfgParams}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof bertiSaveOcdfg>>,
        TError,
        {params?: BertiSaveOcdfgParams},
        TContext
      > => {

      const mutationOptions = getBertiSaveOcdfgMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Save Pnet
 */
export const getBertiSavePnetUrl = (params?: BertiSavePnetParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8000/berti/pnet?${stringifiedParams}` : `http://localhost:8000/berti/pnet`
}

export const bertiSavePnet = async (params?: BertiSavePnetParams, options?: RequestInit): Promise<ResourceOutput> => {
  
  return customFetch<ResourceOutput>(getBertiSavePnetUrl(params),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}




export const getBertiSavePnetMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bertiSavePnet>>, TError,{params?: BertiSavePnetParams}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof bertiSavePnet>>, TError,{params?: BertiSavePnetParams}, TContext> => {

const mutationKey = ['bertiSavePnet'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof bertiSavePnet>>, {params?: BertiSavePnetParams}> = (props) => {
          const {params} = props ?? {};

          return  bertiSavePnet(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type BertiSavePnetMutationResult = NonNullable<Awaited<ReturnType<typeof bertiSavePnet>>>
    
    export type BertiSavePnetMutationError = HTTPValidationError

    /**
 * @summary Save Pnet
 */
export const useBertiSavePnet = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bertiSavePnet>>, TError,{params?: BertiSavePnetParams}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof bertiSavePnet>>,
        TError,
        {params?: BertiSavePnetParams},
        TContext
      > => {

      const mutationOptions = getBertiSavePnetMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    