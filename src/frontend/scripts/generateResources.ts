import fs from "fs";
import path from "path";

const RESOURCE_DIR = path.resolve(__dirname, "../resources/");
const OUTPUT_FILE = path.resolve(
  __dirname,
  "../lib/resources/definitionMap.gen.ts",
);

// 1. Get all subdirectories
const folders = fs
  .readdirSync(RESOURCE_DIR)
  .filter((name) => {
    const fullPath = path.join(RESOURCE_DIR, name);
    return fs.statSync(fullPath).isDirectory();
  })
  .sort(); // Alphabetical consistency

// 2. Generate import statements
const imports = folders
  .map((name) => `import ${name} from "@/resources/${name}";`)
  .join("\n");

// 3. Generate defs array
const defsArray = `const defs = [${folders.join(", ")}] as const;`;

// 4. Generate full file
const output = `
// This file is auto-generated by scripts/genResourceDefinitionMap.ts
/* eslint-disable */

${imports}
import { ResourceType, ResourceViewDefinition } from "@/types/resources";

${defsArray}

export const resourceDefinitionMap: Partial<{
  [K in ResourceType]: ResourceViewDefinition<K>;
}> = Object.fromEntries(defs.map((def) => [def.type, def]));
`;

fs.writeFileSync(OUTPUT_FILE, output.trimStart());
console.log(
  `âœ… Generated resourceDefinitionMap with ${folders.length} entries.`,
);
