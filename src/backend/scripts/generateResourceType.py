import importlib
import pkgutil
from pathlib import Path

RESOURCE_PACKAGE = "resources"
INIT_PATH = Path("resources/__init__.py")


def get_resource_models():
    models = []
    package = importlib.import_module(RESOURCE_PACKAGE)
    for _, module_name, _ in pkgutil.iter_modules(package.__path__):
        module = importlib.import_module(f"{RESOURCE_PACKAGE}.{module_name}")
        for attr in dir(module):
            obj = getattr(module, attr)
            if (
                isinstance(obj, type)
                and hasattr(obj, "__annotations__")
                and "type" in obj.__annotations__
            ):
                models.append((module_name, obj.__name__))
    return models


def generate_init_file():
    models = get_resource_models()

    imports = ""
    exports = []
    class_names = []

    for module_name, class_name in models:
        imports += f"from .{module_name} import {class_name}\n"
        exports.append(f'"{class_name}"')
        class_names.append(class_name)

    content = (
        f"""
# AUTO-GENERATED by gen_union_into_init.py — do not edit manually

{imports}

from typing import Annotated, Union
from pydantic import Field

__all__ = [{", ".join(exports + ['"ResourceUnion"'])}]

ResourceUnion = Annotated[
    Union[{", ".join(class_names)}],
    Field(discriminator="type")
]
""".strip()
        + "\n"
    )

    INIT_PATH.write_text(content)
    print(f"✅ Updated: {INIT_PATH}")


if __name__ == "__main__":
    models = get_resource_models()
    if not models:
        print("⚠️ No valid resource models found.")
    else:
        generate_init_file()
