import importlib
import pkgutil
import sys
from pathlib import Path
from typing import List, Tuple

# ----------------------------------------
# Configurable paths
# ----------------------------------------
BASE_DIR = Path(__file__).resolve().parent.parent  # project root
RESOURCE_PACKAGE = "resources"
RESOURCE_PATH = BASE_DIR / RESOURCE_PACKAGE
INIT_PATH = RESOURCE_PATH / "__init__.py"

# Ensure root is in sys.path
if str(BASE_DIR) not in sys.path:
    sys.path.insert(0, str(BASE_DIR))


# ----------------------------------------
# Find all Pydantic models with "type" field
# ----------------------------------------
def get_resource_models() -> List[Tuple[str, str]]:
    models = []
    try:
        package = importlib.import_module(RESOURCE_PACKAGE)
    except ModuleNotFoundError:
        print(f"❌ Could not import package '{RESOURCE_PACKAGE}'")
        return models

    for _, module_name, _ in pkgutil.iter_modules(package.__path__):
        module = importlib.import_module(f"{RESOURCE_PACKAGE}.{module_name}")
        for attr in dir(module):
            obj = getattr(module, attr)
            if (
                isinstance(obj, type)
                and hasattr(obj, "__annotations__")
                and "type" in obj.__annotations__
            ):
                models.append((module_name, obj.__name__))
    return models


# ----------------------------------------
# Generate __init__.py content
# ----------------------------------------
def generate_init_file(models: List[Tuple[str, str]]):
    imports = ""
    exports = []
    class_names = []

    for module_name, class_name in models:
        imports += f"from .{module_name} import {class_name}\n"
        exports.append(f'"{class_name}"')
        class_names.append(class_name)

    content = (
        f"""
# AUTO-GENERATED by gen_union_into_init.py — do not edit manually

{imports}
from dataclasses import dataclass
from typing import Annotated, Any, Union
from pydantic import Field

__all__ = [{", ".join(exports + ['"ResourceUnion"'])}]

ResourceUnion = Annotated[
    Union[{", ".join(class_names)}],
    Field(discriminator="type")
]

@dataclass
class Resource:
    id: str
    name: str
    created_at: str
    source: str
    meta_data: dict[str, Any]
    resource: ResourceUnion

""".strip()
        + "\n"
    )

    INIT_PATH.write_text(content)
    print(f"✅ Updated: {INIT_PATH.relative_to(BASE_DIR)}")


# ----------------------------------------
# Run if executed directly
# ----------------------------------------
if __name__ == "__main__":
    models = get_resource_models()
    if not models:
        print("⚠️ No valid resource models found in 'resources/'.")
    else:
        generate_init_file(models)
