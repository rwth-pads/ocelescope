/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * OCEAn
 * OpenAPI spec version: 0.9.12
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  BodyImportOcel,
  DefaultOCEL,
  DeleteOcelParams,
  DownloadOcelOcelsDownloadGetParams,
  E2oParams,
  EntityTimeInfo,
  EventAttributes200,
  EventAttributesParams,
  EventCounts200,
  EventCountsParams,
  Filter,
  GetDefaultOcelParams,
  GetFiltersParams,
  HTTPValidationError,
  ImportDefaultOcelParams,
  ImportOcelParams,
  O2oParams,
  ObjectAttributes200,
  ObjectAttributesParams,
  ObjectCount200,
  ObjectCountParams,
  OcelListResponse,
  RelationCountSummary,
  RenameOcelParams,
  SetCurrentOcelParams,
  SetFiltersParams,
  TimeInfoParams
} from '../../fastapi-schemas';

import { customFetch } from '../../fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Returns metadata for all uploaded OCELs along with any OCEL files currently being imported. Includes the ID of the currently active OCEL, if one is selected.
 * @summary List uploaded and uploading OCELs
 */
export const getGetOcelsUrl = () => {


  

  return `http://localhost:8000/ocels/`
}

export const getOcels = async ( options?: RequestInit): Promise<OcelListResponse> => {
  
  return customFetch<OcelListResponse>(getGetOcelsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetOcelsQueryKey = () => {
    return [`http://localhost:8000/ocels/`] as const;
    }

    
export const getGetOcelsQueryOptions = <TData = Awaited<ReturnType<typeof getOcels>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOcels>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOcelsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOcels>>> = ({ signal }) => getOcels({ signal, ...requestOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOcels>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOcelsQueryResult = NonNullable<Awaited<ReturnType<typeof getOcels>>>
export type GetOcelsQueryError = unknown


export function useGetOcels<TData = Awaited<ReturnType<typeof getOcels>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOcels>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOcels>>,
          TError,
          Awaited<ReturnType<typeof getOcels>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOcels<TData = Awaited<ReturnType<typeof getOcels>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOcels>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOcels>>,
          TError,
          Awaited<ReturnType<typeof getOcels>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOcels<TData = Awaited<ReturnType<typeof getOcels>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOcels>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List uploaded and uploading OCELs
 */

export function useGetOcels<TData = Awaited<ReturnType<typeof getOcels>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOcels>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOcelsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Set Filter
 */
export const getSetFiltersUrl = (params?: SetFiltersParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8000/ocels/?${stringifiedParams}` : `http://localhost:8000/ocels/`
}

export const setFilters = async (filter: Filter,
    params?: SetFiltersParams, options?: RequestInit): Promise<unknown> => {
  
  return customFetch<unknown>(getSetFiltersUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      filter,)
  }
);}




export const getSetFiltersMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof setFilters>>, TError,{data: Filter;params?: SetFiltersParams}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof setFilters>>, TError,{data: Filter;params?: SetFiltersParams}, TContext> => {

const mutationKey = ['setFilters'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof setFilters>>, {data: Filter;params?: SetFiltersParams}> = (props) => {
          const {data,params} = props ?? {};

          return  setFilters(data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SetFiltersMutationResult = NonNullable<Awaited<ReturnType<typeof setFilters>>>
    export type SetFiltersMutationBody = Filter
    export type SetFiltersMutationError = HTTPValidationError

    /**
 * @summary Set Filter
 */
export const useSetFilters = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof setFilters>>, TError,{data: Filter;params?: SetFiltersParams}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof setFilters>>,
        TError,
        {data: Filter;params?: SetFiltersParams},
        TContext
      > => {

      const mutationOptions = getSetFiltersMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Sets the active OCEL to the one with the provided `ocel_id`. Subsequent operations may use this as the default OCEL context.
 * @summary Set the current active OCEL
 */
export const getSetCurrentOcelUrl = (params: SetCurrentOcelParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8000/ocels/ocel?${stringifiedParams}` : `http://localhost:8000/ocels/ocel`
}

export const setCurrentOcel = async (params: SetCurrentOcelParams, options?: RequestInit): Promise<unknown> => {
  
  return customFetch<unknown>(getSetCurrentOcelUrl(params),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}




export const getSetCurrentOcelMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof setCurrentOcel>>, TError,{params: SetCurrentOcelParams}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof setCurrentOcel>>, TError,{params: SetCurrentOcelParams}, TContext> => {

const mutationKey = ['setCurrentOcel'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof setCurrentOcel>>, {params: SetCurrentOcelParams}> = (props) => {
          const {params} = props ?? {};

          return  setCurrentOcel(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SetCurrentOcelMutationResult = NonNullable<Awaited<ReturnType<typeof setCurrentOcel>>>
    
    export type SetCurrentOcelMutationError = HTTPValidationError

    /**
 * @summary Set the current active OCEL
 */
export const useSetCurrentOcel = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof setCurrentOcel>>, TError,{params: SetCurrentOcelParams}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof setCurrentOcel>>,
        TError,
        {params: SetCurrentOcelParams},
        TContext
      > => {

      const mutationOptions = getSetCurrentOcelMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Deletes the uploaded OCEL with the given `ocel_id`. This action is irreversible and removes the OCEL from the session.
 * @summary Delete an uploaded OCEL
 */
export const getDeleteOcelUrl = (params: DeleteOcelParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8000/ocels/ocel/delete?${stringifiedParams}` : `http://localhost:8000/ocels/ocel/delete`
}

export const deleteOcel = async (params: DeleteOcelParams, options?: RequestInit): Promise<unknown> => {
  
  return customFetch<unknown>(getDeleteOcelUrl(params),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}




export const getDeleteOcelMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOcel>>, TError,{params: DeleteOcelParams}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteOcel>>, TError,{params: DeleteOcelParams}, TContext> => {

const mutationKey = ['deleteOcel'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOcel>>, {params: DeleteOcelParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteOcel(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOcelMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOcel>>>
    
    export type DeleteOcelMutationError = HTTPValidationError

    /**
 * @summary Delete an uploaded OCEL
 */
export const useDeleteOcel = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOcel>>, TError,{params: DeleteOcelParams}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteOcel>>,
        TError,
        {params: DeleteOcelParams},
        TContext
      > => {

      const mutationOptions = getDeleteOcelMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Renames the OCEL represented by the given `ApiOcel` object to `new_name`. This updates the display name used in the UI and metadata.
 * @summary Rename an uploaded OCEL
 */
export const getRenameOcelUrl = (params: RenameOcelParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8000/ocels/ocel/rename?${stringifiedParams}` : `http://localhost:8000/ocels/ocel/rename`
}

export const renameOcel = async (params: RenameOcelParams, options?: RequestInit): Promise<unknown> => {
  
  return customFetch<unknown>(getRenameOcelUrl(params),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}




export const getRenameOcelMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof renameOcel>>, TError,{params: RenameOcelParams}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof renameOcel>>, TError,{params: RenameOcelParams}, TContext> => {

const mutationKey = ['renameOcel'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof renameOcel>>, {params: RenameOcelParams}> = (props) => {
          const {params} = props ?? {};

          return  renameOcel(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RenameOcelMutationResult = NonNullable<Awaited<ReturnType<typeof renameOcel>>>
    
    export type RenameOcelMutationError = HTTPValidationError

    /**
 * @summary Rename an uploaded OCEL
 */
export const useRenameOcel = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof renameOcel>>, TError,{params: RenameOcelParams}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof renameOcel>>,
        TError,
        {params: RenameOcelParams},
        TContext
      > => {

      const mutationOptions = getRenameOcelMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get Object Attributes
 */
export const getObjectAttributesUrl = (params?: ObjectAttributesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8000/ocels/objects/attributes?${stringifiedParams}` : `http://localhost:8000/ocels/objects/attributes`
}

export const objectAttributes = async (params?: ObjectAttributesParams, options?: RequestInit): Promise<ObjectAttributes200> => {
  
  return customFetch<ObjectAttributes200>(getObjectAttributesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getObjectAttributesQueryKey = (params?: ObjectAttributesParams,) => {
    return [`http://localhost:8000/ocels/objects/attributes`, ...(params ? [params]: [])] as const;
    }

    
export const getObjectAttributesQueryOptions = <TData = Awaited<ReturnType<typeof objectAttributes>>, TError = HTTPValidationError>(params?: ObjectAttributesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof objectAttributes>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getObjectAttributesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof objectAttributes>>> = ({ signal }) => objectAttributes(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof objectAttributes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ObjectAttributesQueryResult = NonNullable<Awaited<ReturnType<typeof objectAttributes>>>
export type ObjectAttributesQueryError = HTTPValidationError


export function useObjectAttributes<TData = Awaited<ReturnType<typeof objectAttributes>>, TError = HTTPValidationError>(
 params: undefined |  ObjectAttributesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof objectAttributes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof objectAttributes>>,
          TError,
          Awaited<ReturnType<typeof objectAttributes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useObjectAttributes<TData = Awaited<ReturnType<typeof objectAttributes>>, TError = HTTPValidationError>(
 params?: ObjectAttributesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof objectAttributes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof objectAttributes>>,
          TError,
          Awaited<ReturnType<typeof objectAttributes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useObjectAttributes<TData = Awaited<ReturnType<typeof objectAttributes>>, TError = HTTPValidationError>(
 params?: ObjectAttributesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof objectAttributes>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Object Attributes
 */

export function useObjectAttributes<TData = Awaited<ReturnType<typeof objectAttributes>>, TError = HTTPValidationError>(
 params?: ObjectAttributesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof objectAttributes>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getObjectAttributesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Event Attributes
 */
export const getEventAttributesUrl = (params?: EventAttributesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8000/ocels/events/attributes?${stringifiedParams}` : `http://localhost:8000/ocels/events/attributes`
}

export const eventAttributes = async (params?: EventAttributesParams, options?: RequestInit): Promise<EventAttributes200> => {
  
  return customFetch<EventAttributes200>(getEventAttributesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getEventAttributesQueryKey = (params?: EventAttributesParams,) => {
    return [`http://localhost:8000/ocels/events/attributes`, ...(params ? [params]: [])] as const;
    }

    
export const getEventAttributesQueryOptions = <TData = Awaited<ReturnType<typeof eventAttributes>>, TError = HTTPValidationError>(params?: EventAttributesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof eventAttributes>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEventAttributesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof eventAttributes>>> = ({ signal }) => eventAttributes(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof eventAttributes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type EventAttributesQueryResult = NonNullable<Awaited<ReturnType<typeof eventAttributes>>>
export type EventAttributesQueryError = HTTPValidationError


export function useEventAttributes<TData = Awaited<ReturnType<typeof eventAttributes>>, TError = HTTPValidationError>(
 params: undefined |  EventAttributesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof eventAttributes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof eventAttributes>>,
          TError,
          Awaited<ReturnType<typeof eventAttributes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEventAttributes<TData = Awaited<ReturnType<typeof eventAttributes>>, TError = HTTPValidationError>(
 params?: EventAttributesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof eventAttributes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof eventAttributes>>,
          TError,
          Awaited<ReturnType<typeof eventAttributes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEventAttributes<TData = Awaited<ReturnType<typeof eventAttributes>>, TError = HTTPValidationError>(
 params?: EventAttributesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof eventAttributes>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Event Attributes
 */

export function useEventAttributes<TData = Awaited<ReturnType<typeof eventAttributes>>, TError = HTTPValidationError>(
 params?: EventAttributesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof eventAttributes>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getEventAttributesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Event Counts
 */
export const getEventCountsUrl = (params?: EventCountsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8000/ocels/events/counts?${stringifiedParams}` : `http://localhost:8000/ocels/events/counts`
}

export const eventCounts = async (params?: EventCountsParams, options?: RequestInit): Promise<EventCounts200> => {
  
  return customFetch<EventCounts200>(getEventCountsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getEventCountsQueryKey = (params?: EventCountsParams,) => {
    return [`http://localhost:8000/ocels/events/counts`, ...(params ? [params]: [])] as const;
    }

    
export const getEventCountsQueryOptions = <TData = Awaited<ReturnType<typeof eventCounts>>, TError = HTTPValidationError>(params?: EventCountsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof eventCounts>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEventCountsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof eventCounts>>> = ({ signal }) => eventCounts(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof eventCounts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type EventCountsQueryResult = NonNullable<Awaited<ReturnType<typeof eventCounts>>>
export type EventCountsQueryError = HTTPValidationError


export function useEventCounts<TData = Awaited<ReturnType<typeof eventCounts>>, TError = HTTPValidationError>(
 params: undefined |  EventCountsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof eventCounts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof eventCounts>>,
          TError,
          Awaited<ReturnType<typeof eventCounts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEventCounts<TData = Awaited<ReturnType<typeof eventCounts>>, TError = HTTPValidationError>(
 params?: EventCountsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof eventCounts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof eventCounts>>,
          TError,
          Awaited<ReturnType<typeof eventCounts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEventCounts<TData = Awaited<ReturnType<typeof eventCounts>>, TError = HTTPValidationError>(
 params?: EventCountsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof eventCounts>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Event Counts
 */

export function useEventCounts<TData = Awaited<ReturnType<typeof eventCounts>>, TError = HTTPValidationError>(
 params?: EventCountsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof eventCounts>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getEventCountsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Time Info
 */
export const getTimeInfoUrl = (params?: TimeInfoParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8000/ocels/events/time?${stringifiedParams}` : `http://localhost:8000/ocels/events/time`
}

export const timeInfo = async (params?: TimeInfoParams, options?: RequestInit): Promise<EntityTimeInfo> => {
  
  return customFetch<EntityTimeInfo>(getTimeInfoUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getTimeInfoQueryKey = (params?: TimeInfoParams,) => {
    return [`http://localhost:8000/ocels/events/time`, ...(params ? [params]: [])] as const;
    }

    
export const getTimeInfoQueryOptions = <TData = Awaited<ReturnType<typeof timeInfo>>, TError = HTTPValidationError>(params?: TimeInfoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof timeInfo>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTimeInfoQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof timeInfo>>> = ({ signal }) => timeInfo(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof timeInfo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TimeInfoQueryResult = NonNullable<Awaited<ReturnType<typeof timeInfo>>>
export type TimeInfoQueryError = HTTPValidationError


export function useTimeInfo<TData = Awaited<ReturnType<typeof timeInfo>>, TError = HTTPValidationError>(
 params: undefined |  TimeInfoParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof timeInfo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof timeInfo>>,
          TError,
          Awaited<ReturnType<typeof timeInfo>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTimeInfo<TData = Awaited<ReturnType<typeof timeInfo>>, TError = HTTPValidationError>(
 params?: TimeInfoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof timeInfo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof timeInfo>>,
          TError,
          Awaited<ReturnType<typeof timeInfo>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTimeInfo<TData = Awaited<ReturnType<typeof timeInfo>>, TError = HTTPValidationError>(
 params?: TimeInfoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof timeInfo>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Time Info
 */

export function useTimeInfo<TData = Awaited<ReturnType<typeof timeInfo>>, TError = HTTPValidationError>(
 params?: TimeInfoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof timeInfo>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTimeInfoQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Object Counts
 */
export const getObjectCountUrl = (params?: ObjectCountParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8000/ocels/objects/counts?${stringifiedParams}` : `http://localhost:8000/ocels/objects/counts`
}

export const objectCount = async (params?: ObjectCountParams, options?: RequestInit): Promise<ObjectCount200> => {
  
  return customFetch<ObjectCount200>(getObjectCountUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getObjectCountQueryKey = (params?: ObjectCountParams,) => {
    return [`http://localhost:8000/ocels/objects/counts`, ...(params ? [params]: [])] as const;
    }

    
export const getObjectCountQueryOptions = <TData = Awaited<ReturnType<typeof objectCount>>, TError = HTTPValidationError>(params?: ObjectCountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof objectCount>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getObjectCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof objectCount>>> = ({ signal }) => objectCount(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof objectCount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ObjectCountQueryResult = NonNullable<Awaited<ReturnType<typeof objectCount>>>
export type ObjectCountQueryError = HTTPValidationError


export function useObjectCount<TData = Awaited<ReturnType<typeof objectCount>>, TError = HTTPValidationError>(
 params: undefined |  ObjectCountParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof objectCount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof objectCount>>,
          TError,
          Awaited<ReturnType<typeof objectCount>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useObjectCount<TData = Awaited<ReturnType<typeof objectCount>>, TError = HTTPValidationError>(
 params?: ObjectCountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof objectCount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof objectCount>>,
          TError,
          Awaited<ReturnType<typeof objectCount>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useObjectCount<TData = Awaited<ReturnType<typeof objectCount>>, TError = HTTPValidationError>(
 params?: ObjectCountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof objectCount>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Object Counts
 */

export function useObjectCount<TData = Awaited<ReturnType<typeof objectCount>>, TError = HTTPValidationError>(
 params?: ObjectCountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof objectCount>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getObjectCountQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get E2O
 */
export const getE2oUrl = (params?: E2oParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8000/ocels/relations/e2o?${stringifiedParams}` : `http://localhost:8000/ocels/relations/e2o`
}

export const e2o = async (params?: E2oParams, options?: RequestInit): Promise<RelationCountSummary[]> => {
  
  return customFetch<RelationCountSummary[]>(getE2oUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getE2oQueryKey = (params?: E2oParams,) => {
    return [`http://localhost:8000/ocels/relations/e2o`, ...(params ? [params]: [])] as const;
    }

    
export const getE2oQueryOptions = <TData = Awaited<ReturnType<typeof e2o>>, TError = HTTPValidationError>(params?: E2oParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof e2o>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getE2oQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof e2o>>> = ({ signal }) => e2o(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof e2o>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type E2oQueryResult = NonNullable<Awaited<ReturnType<typeof e2o>>>
export type E2oQueryError = HTTPValidationError


export function useE2o<TData = Awaited<ReturnType<typeof e2o>>, TError = HTTPValidationError>(
 params: undefined |  E2oParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof e2o>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof e2o>>,
          TError,
          Awaited<ReturnType<typeof e2o>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useE2o<TData = Awaited<ReturnType<typeof e2o>>, TError = HTTPValidationError>(
 params?: E2oParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof e2o>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof e2o>>,
          TError,
          Awaited<ReturnType<typeof e2o>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useE2o<TData = Awaited<ReturnType<typeof e2o>>, TError = HTTPValidationError>(
 params?: E2oParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof e2o>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get E2O
 */

export function useE2o<TData = Awaited<ReturnType<typeof e2o>>, TError = HTTPValidationError>(
 params?: E2oParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof e2o>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getE2oQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Object Relations
 */
export const getO2oUrl = (params?: O2oParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8000/ocels/relations/o2o?${stringifiedParams}` : `http://localhost:8000/ocels/relations/o2o`
}

export const o2o = async (params?: O2oParams, options?: RequestInit): Promise<RelationCountSummary[]> => {
  
  return customFetch<RelationCountSummary[]>(getO2oUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getO2oQueryKey = (params?: O2oParams,) => {
    return [`http://localhost:8000/ocels/relations/o2o`, ...(params ? [params]: [])] as const;
    }

    
export const getO2oQueryOptions = <TData = Awaited<ReturnType<typeof o2o>>, TError = HTTPValidationError>(params?: O2oParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof o2o>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getO2oQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof o2o>>> = ({ signal }) => o2o(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof o2o>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type O2oQueryResult = NonNullable<Awaited<ReturnType<typeof o2o>>>
export type O2oQueryError = HTTPValidationError


export function useO2o<TData = Awaited<ReturnType<typeof o2o>>, TError = HTTPValidationError>(
 params: undefined |  O2oParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof o2o>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof o2o>>,
          TError,
          Awaited<ReturnType<typeof o2o>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useO2o<TData = Awaited<ReturnType<typeof o2o>>, TError = HTTPValidationError>(
 params?: O2oParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof o2o>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof o2o>>,
          TError,
          Awaited<ReturnType<typeof o2o>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useO2o<TData = Awaited<ReturnType<typeof o2o>>, TError = HTTPValidationError>(
 params?: O2oParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof o2o>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Object Relations
 */

export function useO2o<TData = Awaited<ReturnType<typeof o2o>>, TError = HTTPValidationError>(
 params?: O2oParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof o2o>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getO2oQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Filter
 */
export const getGetFiltersUrl = (params?: GetFiltersParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8000/ocels/filter?${stringifiedParams}` : `http://localhost:8000/ocels/filter`
}

export const getFilters = async (params?: GetFiltersParams, options?: RequestInit): Promise<Filter> => {
  
  return customFetch<Filter>(getGetFiltersUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetFiltersQueryKey = (params?: GetFiltersParams,) => {
    return [`http://localhost:8000/ocels/filter`, ...(params ? [params]: [])] as const;
    }

    
export const getGetFiltersQueryOptions = <TData = Awaited<ReturnType<typeof getFilters>>, TError = HTTPValidationError>(params?: GetFiltersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFilters>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFiltersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFilters>>> = ({ signal }) => getFilters(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFilters>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetFiltersQueryResult = NonNullable<Awaited<ReturnType<typeof getFilters>>>
export type GetFiltersQueryError = HTTPValidationError


export function useGetFilters<TData = Awaited<ReturnType<typeof getFilters>>, TError = HTTPValidationError>(
 params: undefined |  GetFiltersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFilters>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFilters>>,
          TError,
          Awaited<ReturnType<typeof getFilters>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFilters<TData = Awaited<ReturnType<typeof getFilters>>, TError = HTTPValidationError>(
 params?: GetFiltersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFilters>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFilters>>,
          TError,
          Awaited<ReturnType<typeof getFilters>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFilters<TData = Awaited<ReturnType<typeof getFilters>>, TError = HTTPValidationError>(
 params?: GetFiltersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFilters>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Filter
 */

export function useGetFilters<TData = Awaited<ReturnType<typeof getFilters>>, TError = HTTPValidationError>(
 params?: GetFiltersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFilters>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetFiltersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Import OCEL 2.0 from .sqlite file
 */
export const getImportOcelUrl = (params: ImportOcelParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8000/ocels/import?${stringifiedParams}` : `http://localhost:8000/ocels/import`
}

export const importOcel = async (bodyImportOcel: BodyImportOcel,
    params: ImportOcelParams, options?: RequestInit): Promise<unknown> => {
    const formData = new FormData();
formData.append(`file`, bodyImportOcel.file)

  return customFetch<unknown>(getImportOcelUrl(params),
  {      
    ...options,
    method: 'POST'
    ,
    body: 
      formData,
  }
);}




export const getImportOcelMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof importOcel>>, TError,{data: BodyImportOcel;params: ImportOcelParams}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof importOcel>>, TError,{data: BodyImportOcel;params: ImportOcelParams}, TContext> => {

const mutationKey = ['importOcel'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof importOcel>>, {data: BodyImportOcel;params: ImportOcelParams}> = (props) => {
          const {data,params} = props ?? {};

          return  importOcel(data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ImportOcelMutationResult = NonNullable<Awaited<ReturnType<typeof importOcel>>>
    export type ImportOcelMutationBody = BodyImportOcel
    export type ImportOcelMutationError = HTTPValidationError

    /**
 * @summary Import OCEL 2.0 from .sqlite file
 */
export const useImportOcel = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof importOcel>>, TError,{data: BodyImportOcel;params: ImportOcelParams}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof importOcel>>,
        TError,
        {data: BodyImportOcel;params: ImportOcelParams},
        TContext
      > => {

      const mutationOptions = getImportOcelMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get default OCEL metadata
 */
export const getGetDefaultOcelUrl = (params?: GetDefaultOcelParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8000/ocels/ocel/default?${stringifiedParams}` : `http://localhost:8000/ocels/ocel/default`
}

export const getDefaultOcel = async (params?: GetDefaultOcelParams, options?: RequestInit): Promise<DefaultOCEL[]> => {
  
  return customFetch<DefaultOCEL[]>(getGetDefaultOcelUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetDefaultOcelQueryKey = (params?: GetDefaultOcelParams,) => {
    return [`http://localhost:8000/ocels/ocel/default`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDefaultOcelQueryOptions = <TData = Awaited<ReturnType<typeof getDefaultOcel>>, TError = HTTPValidationError>(params?: GetDefaultOcelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDefaultOcel>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDefaultOcelQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDefaultOcel>>> = ({ signal }) => getDefaultOcel(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDefaultOcel>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDefaultOcelQueryResult = NonNullable<Awaited<ReturnType<typeof getDefaultOcel>>>
export type GetDefaultOcelQueryError = HTTPValidationError


export function useGetDefaultOcel<TData = Awaited<ReturnType<typeof getDefaultOcel>>, TError = HTTPValidationError>(
 params: undefined |  GetDefaultOcelParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDefaultOcel>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDefaultOcel>>,
          TError,
          Awaited<ReturnType<typeof getDefaultOcel>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDefaultOcel<TData = Awaited<ReturnType<typeof getDefaultOcel>>, TError = HTTPValidationError>(
 params?: GetDefaultOcelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDefaultOcel>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDefaultOcel>>,
          TError,
          Awaited<ReturnType<typeof getDefaultOcel>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDefaultOcel<TData = Awaited<ReturnType<typeof getDefaultOcel>>, TError = HTTPValidationError>(
 params?: GetDefaultOcelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDefaultOcel>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get default OCEL metadata
 */

export function useGetDefaultOcel<TData = Awaited<ReturnType<typeof getDefaultOcel>>, TError = HTTPValidationError>(
 params?: GetDefaultOcelParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDefaultOcel>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetDefaultOcelQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Import default OCEL
 */
export const getImportDefaultOcelUrl = (params: ImportDefaultOcelParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8000/ocels/import-default?${stringifiedParams}` : `http://localhost:8000/ocels/import-default`
}

export const importDefaultOcel = async (params: ImportDefaultOcelParams, options?: RequestInit): Promise<unknown> => {
  
  return customFetch<unknown>(getImportDefaultOcelUrl(params),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}




export const getImportDefaultOcelMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof importDefaultOcel>>, TError,{params: ImportDefaultOcelParams}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof importDefaultOcel>>, TError,{params: ImportDefaultOcelParams}, TContext> => {

const mutationKey = ['importDefaultOcel'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof importDefaultOcel>>, {params: ImportDefaultOcelParams}> = (props) => {
          const {params} = props ?? {};

          return  importDefaultOcel(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ImportDefaultOcelMutationResult = NonNullable<Awaited<ReturnType<typeof importDefaultOcel>>>
    
    export type ImportDefaultOcelMutationError = HTTPValidationError

    /**
 * @summary Import default OCEL
 */
export const useImportDefaultOcel = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof importDefaultOcel>>, TError,{params: ImportDefaultOcelParams}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof importDefaultOcel>>,
        TError,
        {params: ImportDefaultOcelParams},
        TContext
      > => {

      const mutationOptions = getImportDefaultOcelMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Download OCEL including app state
 */
export const getDownloadOcelOcelsDownloadGetUrl = (params: DownloadOcelOcelsDownloadGetParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8000/ocels/download?${stringifiedParams}` : `http://localhost:8000/ocels/download`
}

export const downloadOcelOcelsDownloadGet = async (params: DownloadOcelOcelsDownloadGetParams, options?: RequestInit): Promise<unknown> => {
  
  return customFetch<unknown>(getDownloadOcelOcelsDownloadGetUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getDownloadOcelOcelsDownloadGetQueryKey = (params: DownloadOcelOcelsDownloadGetParams,) => {
    return [`http://localhost:8000/ocels/download`, ...(params ? [params]: [])] as const;
    }

    
export const getDownloadOcelOcelsDownloadGetQueryOptions = <TData = Awaited<ReturnType<typeof downloadOcelOcelsDownloadGet>>, TError = HTTPValidationError>(params: DownloadOcelOcelsDownloadGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadOcelOcelsDownloadGet>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDownloadOcelOcelsDownloadGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof downloadOcelOcelsDownloadGet>>> = ({ signal }) => downloadOcelOcelsDownloadGet(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof downloadOcelOcelsDownloadGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DownloadOcelOcelsDownloadGetQueryResult = NonNullable<Awaited<ReturnType<typeof downloadOcelOcelsDownloadGet>>>
export type DownloadOcelOcelsDownloadGetQueryError = HTTPValidationError


export function useDownloadOcelOcelsDownloadGet<TData = Awaited<ReturnType<typeof downloadOcelOcelsDownloadGet>>, TError = HTTPValidationError>(
 params: DownloadOcelOcelsDownloadGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadOcelOcelsDownloadGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof downloadOcelOcelsDownloadGet>>,
          TError,
          Awaited<ReturnType<typeof downloadOcelOcelsDownloadGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDownloadOcelOcelsDownloadGet<TData = Awaited<ReturnType<typeof downloadOcelOcelsDownloadGet>>, TError = HTTPValidationError>(
 params: DownloadOcelOcelsDownloadGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadOcelOcelsDownloadGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof downloadOcelOcelsDownloadGet>>,
          TError,
          Awaited<ReturnType<typeof downloadOcelOcelsDownloadGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDownloadOcelOcelsDownloadGet<TData = Awaited<ReturnType<typeof downloadOcelOcelsDownloadGet>>, TError = HTTPValidationError>(
 params: DownloadOcelOcelsDownloadGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadOcelOcelsDownloadGet>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Download OCEL including app state
 */

export function useDownloadOcelOcelsDownloadGet<TData = Awaited<ReturnType<typeof downloadOcelOcelsDownloadGet>>, TError = HTTPValidationError>(
 params: DownloadOcelOcelsDownloadGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadOcelOcelsDownloadGet>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDownloadOcelOcelsDownloadGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



